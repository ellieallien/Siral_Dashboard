nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
debug(comptage_par_admin)
source('~/Eliora Henzler/GitHub/Siral_dashboard/construction_carto.R')
parternaires_exec_p = comptage_par_admin(df = parternaires_exec,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
source('~/Eliora Henzler/GitHub/Siral_dashboard/construction_carto.R')
parternaires_exec_p = comptage_par_admin(df = parternaires_exec,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
debug(comptage_par_admin)
parternaires_exec_p = comptage_par_admin(df = parternaires_exec,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
qu_admin = quo_name(enquo(nom.admin))
print(qu_admin)
variables = c(qu_admin, nom.partenaires)
parternaires_exec_p = comptage_par_admin(df = parternaires_exec,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
qu_admin = quo_name(enquo(nom.admin))
variables = c(qu_admin, nom.partenaires)
partenaires_p = df %>%  dplyr::group_by(!! qu_admin
)
partenaires_p = df %>%  dplyr::group_by(!! qu_admin) %>%
nest()
View(partenaires_p)
source('~/Eliora Henzler/GitHub/Siral_dashboard/construction_carto.R')
source('~/Eliora Henzler/GitHub/Siral_dashboard/construction_carto.R')
source('~/Eliora Henzler/GitHub/Siral_dashboard/construction_carto.R')
parternaires_exec_p = comptage_par_admin(df = parternaires_exec,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
source('~/Eliora Henzler/GitHub/Siral_dashboard/construction_carto.R')
parternaires_exec_p = comptage_par_admin(df = parternaires_exec,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
partenaires_exec_carte = carte_complete(donnees_groupees =
parternaires_exec_p,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
couleurs <- couleurs_pour_carte("Blues", nombre = length(unique(partenaires_exec_carte$Partenaires)))
ggplot(partenaires_exec_carte) +
geom_sf(aes(fill = factor(Partenaires))) +
scale_fill_manual(values = couleurs) +
labs(fill = "Partenaires avec interventions") +
theme(text = element_text(family = "Arial Narrow"))
couleurs <- couleurs_pour_carte("Blues", nombre = length(unique(partenaires_exec_carte[,2])))
couleurs <- couleurs_pour_carte("Blues", nombre = length(unique(partenaires_exec_carte[2,])))
View(parternaires_exec_p)
partenaires_exec_carte[2,]
partenaires_exec_carte[,2]
View(parternaires_exec_p)
View(partenaires_exec_carte)
couleurs <- couleurs_pour_carte("Blues", nombre = length(unique(partenaires_exec_carte[,2])))
partenaires_exec_carte[,1]
partenaires_exec_carte[1,]
couleurs <- couleurs_pour_carte("Blues", nombre = length(unique(partenaires_exec_carte$Acteur_Organisation_de_mise_en_uvre)))
ggplot(partenaires_exec_carte) +
geom_sf(aes(fill = factor(Partenaires))) +
scale_fill_manual(values = couleurs) +
labs(fill = "Partenaires avec interventions") +
theme(text = element_text(family = "Arial Narrow"))
partenaires_exec_carte[,2]
ggplot(partenaires_exec_carte)
View(partenaires_exec_carte)
debug(carte_complete)
partenaires_exec_carte = carte_complete(donnees_groupees =
parternaires_exec_p,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
partenaires_exec_carte = carte_complete(donnees_groupees =
parternaires_exec_p,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
#check que tous les noms de colonnes dans les objets corr.
if(sum(donnees_groupees[nom.admin.donnees] %in% shapefile[nom.admin.shapefile])>0){
stop("Certaines valeurs dans les donnees ne sont pas dans les bases geographiques. Merci de verifier l'orthographe")
}
variables = c(variable,
# nom.admin.shapefile,
"geometry")
Geometrie_groupee = merge(y = donnees_groupees,
x = shapefile,
by.y = nom.admin.donnees,
by.x = nom.admin.shapefile,
all.x = T)  %>%  select(!! variables)
View(Geometrie_groupee)
undebug(carte_complete)
partenaires_exec_carte = carte_complete(donnees_groupees =
parternaires_exec_p,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
ggplot(partenaires_exec_carte)
ggplot(partenaires_exec_carte)
ggplot(partenaires_exec_carte) +
geom_sf(aes(fill = factor(Partenaires))) +
scale_fill_manual(values = couleurs) +
labs(fill = "Partenaires avec interventions") +
theme(text = element_text(family = "Arial Narrow"))
ggplot(partenaires_exec_carte) +
geom_sf(aes(fill = factor(Acteur_Organisation_de_mise_en_uvre))) +
scale_fill_manual(values = couleurs) +
labs(fill = "Partenaires avec interventions") +
theme(text = element_text(family = "Arial Narrow"))
homes = questionnaire$choices_for_select_multiple("Type_de_b_n_ficiaires", data)
#Chargement des donnees
data = read.csv2("./input/logements_donnes.csv", stringsAsFactors = F)
questions = read.csv2("./input/questions.csv", stringsAsFactors = F)
names(questions)[1] = "type"
choices = read.csv2("./input/choices.csv", stringsAsFactors = F)
names(choices)[1] = "list_name"
questionnaire = koboquest::load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label_french")
homes = questionnaire$choices_for_select_multiple("Type_de_b_n_ficiaires", data)
questionnaire$question_is_select_multiple("Type_de_b_n_ficiaires")
questionnaire$question_is_sm_choice(Type_de_b_n_ficiaires.autochtones_vu)
questionnaire$question_is_sm_choice("Type_de_b_n_ficiaires.autochtones_vu")
View(questions)
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
questionnaire$choices_for_select_multiple("Type_de_b_n_ficiaires", data)
homes = questionnaire$choices_for_select_multiple("type_de_b_n_ficiaires", data)
homes = data[questionnaire$choices_for_select_multiple("type_de_b_n_ficiaires", data)]
aggregate(data$Nombre.total.de.personnes.couvertes, list(data$Type.de.beneficiaires), sum, na.rm = T)
sum(homes)
homes %>% lapply(sum)
homes %>% lapply(sum(, na.rm = T))
homes %>% lapply(sum(., na.rm = T))
homes %>% lapply(., sum(x, na.rm = T))
homes %>% lapply(., sum(na.rm = T))
homes %>% lapply(., function(x)sum(x, na.rm = T))
chacun = homes %>% lapply(., function(x)sum(x, na.rm = T)) %>% unlist
targets = read.csv2("./input/targets.csv", stringsAsFactors = F)
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
targets$Ã¯..Province
targets = read.csv2("./input/targets.csv", stringsAsFactors = F)
names(targets)[1] = "Province"
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
targets$Territoire
targets$Territoire %in% data$zonesante
targets$Territoire %in% data$airesante
data$zonesante
data$airesante
data$airesante  %>% table
data$zonesante  %>% table
View(Partenaires)
Partenaires <- data %>%
select(Acteur_Organisation_de_mise_en_uvre, Bailleurs_de_fonds, zonesante) %>%
dplyr::group_by(zonesante) %>%
nest() %>%
mutate(Bailleurs = map(data, function(df) unique(df$Bailleurs_de_fonds))) %>%  mutate(Partenaire = map(data, function(df)unique(df$Acteur_Organisation_de_mise_en_uvre)))
Partenaires$Bailleurs = map_to_labels_outside(Partenaires$Bailleurs, "Bailleurs_de_fonds", questionnaire)
Partenaires$Partenaire = map_to_labels_outside(Partenaires$Partenaire, "Acteur_Organisation_de_mise_en_uvre", questionnaire)
View(Partenaires)
Partenaires$zonesante = map_to_labels_outside(Partenaires$zonesante, "zonesante", questionnaire)
Partenaires %<>%
select(Zone.de.sante, Partenaire, Bailleurs) %>%
kable(format = "markdown")
Partenaires %<>%
select(Zone_de_sante, Partenaire, Bailleurs) %>%
kable(format = "markdown")
Partenaires$Zone_de_sante = map_to_labels_outside(Partenaires$zonesante, "zonesante", questionnaire)
Partenaires %<>%
select(Zone_de_sante, Partenaire, Bailleurs) %>%
kable(format = "markdown")
Partenaires$zonesante = map_to_labels_outside(Partenaires$zonesante, "zonesante", questionnaire)
Partenaires <- data %>%
select(Acteur_Organisation_de_mise_en_uvre, Bailleurs_de_fonds, zonesante) %>%
dplyr::group_by(zonesante) %>%
nest() %>%
mutate(Bailleurs = map(data, function(df) unique(df$Bailleurs_de_fonds))) %>%  mutate(Partenaire = map(data, function(df)unique(df$Acteur_Organisation_de_mise_en_uvre)))
Partenaires$Bailleurs = map_to_labels_outside(Partenaires$Bailleurs, "Bailleurs_de_fonds", questionnaire)
Partenaires$Partenaire = map_to_labels_outside(Partenaires$Partenaire, "Acteur_Organisation_de_mise_en_uvre", questionnaire)
Partenaires$zonesante = map_to_labels_outside(Partenaires$zonesante, "zonesante", questionnaire)
Partenaires %<>%
select(zonesante, Partenaire, Bailleurs) %>%
kable(format = "markdown")
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
View(personnes_couvertes)
targets %<>% select(Province, Target)
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
personnes_couvertes$gap = merge(personnes_couvertes, targets, by.x = Group.1, by.y = Province)
personnes_couvertes$gap = merge(personnes_couvertes, targets, by.x = "Group.1", by.y = "Province")
personnes_couvertes$gap = merge(x = personnes_couvertes,
y = targets,
by.x = "Group.1",
by.y = "Province")
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
View(personnes_couvertes)
personnes_couvertes$gap = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
View(personnes_couvertes)
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes$Province = map_to_labels_outside(personnes_couvertes$Province, "province", questionnaire)
personnes_couvertes$gap = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
View(personnes_couvertes)
personnes_couvertes = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
View(personnes_couvertes)
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes$Province = map_to_labels_outside(personnes_couvertes$Province, "province", questionnaire)
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
View(personnes_couvertes_ye)
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
targets$Target %<>% as.numeric
targets = read.csv2("./input/targets.csv", stringsAsFactors = F)
names(targets)[1] = "Province"
targets$Target %<>% gsub(" ", "", ., fixed = T) %>% as.numeric
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
View(personnes_couvertes_ye)
data$menages_projet
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
View(personnes_couvertes)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes$Province = map_to_labels_outside(personnes_couvertes$Province, "province", questionnaire)
View(personnes_couvertes)
View(personnes_couvertes)
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes$Province = map_to_labels_outside(personnes_couvertes$Province, "province", questionnaire)
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
View(personnes_couvertes_ye)
View(personnes_couvertes)
personnes_couvertes %>% mutate(Province = map_to_labels_outside(Province, "province", questionnaire))  %>% mutate(Personnes = menages * 5)
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes %<>% mutate(Province = map_to_labels_outside(Province, "province", questionnaire))  %>% mutate(Personnes = menages * 5)
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = Personnes/Target)
View(personnes_couvertes_ye)
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = menages/Target)
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
targets = read.csv2("./input/targets.csv", stringsAsFactors = F)
names(targets)[1] = "Province"
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes %<>% mutate(Province = map_to_labels_outside(Province, "province", questionnaire))  %>% mutate(Personnes = menages * 5)
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
targets = aggregate(targets$target_hno_2019, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = menages/Target)
personnes_couvertes_ye %>% carte_complete(donnees_groupees = .,
shapefile = Province,
nom.admin.donnees = "Province", nom.admin.shapefile = "NOM", variable =
)
personnes_couvertes_ye %>% carte_complete(donnees_groupees = .,
shapefile = Province,
nom.admin.donnees = "Province", nom.admin.shapefile = "NOM", variable = "Ratio")
personnes_carte <- personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = menages/Target)
carte_gap <- personnes_couvertes_ye %>% carte_complete(donnees_groupees = .,
shapefile = Province,
nom.admin.donnees = "Province", nom.admin.shapefile = "NOM", variable = "Ratio")
personnes_couvertes_ye
View(carte_gap)
debug(carte_complete)
carte_gap <- personnes_couvertes_ye %>% carte_complete(donnees_groupees = .,
shapefile = Province,
nom.admin.donnees = "Province", nom.admin.shapefile = "NOM", variable = "Ratio")
#check que tous les noms de colonnes dans les objets corr.
if(sum(donnees_groupees[nom.admin.donnees] %in% shapefile[nom.admin.shapefile])>0){
stop("Certaines valeurs dans les donnees ne sont pas dans les bases geographiques. Merci de verifier l'orthographe")
}
variables = c(variable,
# nom.admin.shapefile,
"geometry")
Geometrie_groupee = merge(y = donnees_groupees,
x = shapefile,
by.y = nom.admin.donnees,
by.x = nom.admin.shapefile,
all.x = T)  %>%  select(!! variables)
source('~/Eliora Henzler/GitHub/Siral_dashboard/construction_carto.R')
source('~/Eliora Henzler/GitHub/SIRAL_dashboard/geodata.R')
Province$NOM
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes %<>% mutate(Personnes = menages * 5)
targets = aggregate(targets$target_hno_2019, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = menages/Target)
View(personnes_couvertes_ye)
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes %<>% mutate(Personnes = menages * 5)
View(personnes_couvertes)
targets = aggregate(targets$target_hno_2019, list(targets$Province), sum, na.rm = T)
targets = aggregate(targets$target_hno_2019, list(targets$Province), sum, na.rm = T)
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = menages/Target)
View(personnes_couvertes_ye)
targets = read.csv2("./input/targets.csv", stringsAsFactors = F)
names(targets)[1] = "Province"
targets$target_hno_2019 %<>% gsub(" ", "", ., fixed = T) %>% as.numeric
targets$Province %<>% gsub("-", " ", ., fixed = T) %>% tolower(gsub("[^a-zA-Z0-9_]", "\\ ", Province$NOM ))
targets %<>% select(Province, target_hno_2019)
targets$Province %<>% gsub("-", " ", ., fixed = T) %>% tolower(gsub("[^a-zA-Z0-9_]", "\\ ", . ))
targets$Province %<>% gsub("-", " ", ., fixed = T) %>% tolower
targets = read.csv2("./input/targets.csv", stringsAsFactors = F)
names(targets)[1] = "Province"
targets$target_hno_2019 %<>% gsub(" ", "", ., fixed = T) %>% as.numeric
targets$Province %<>% gsub("-", " ", ., fixed = T) %>% tolower
targets %<>% select(Province, target_hno_2019)
View(targets)
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
personnes_couvertes = aggregate(data$menages_projet, list(data$province), sum, na.rm = T)
names(personnes_couvertes) = c("Province", "menages")
personnes_couvertes %<>% mutate(Personnes = menages * 5)
targets = aggregate(targets$Target, list(targets$Province), sum, na.rm = T)
targets = aggregate(targets$target_hno_2019, list(targets$Province), sum, na.rm = T)
names(targets) = c("Province", "Target")
View(targets)
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = menages/Target)
View(personnes_couvertes)
View(personnes_couvertes_ye)
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = 1 - (menages/Target))
View(personnes_couvertes_ye)
personnes_couvertes_ye = merge(x = personnes_couvertes,
y = targets,
by.x = "Province",
by.y = "Province",
all.y = T)  %>% mutate(Ratio = 1 - (menages/Target))
View(personnes_couvertes_ye)
carte_gap <- personnes_couvertes_ye %>% carte_complete(donnees_groupees = .,
shapefile = Province,
nom.admin.donnees = "Province", nom.admin.shapefile = "NOM", variable = "Ratio")
View(carte_gap)
View(carte_gap)
couleurs <- couleurs_pour_carte("Reds", nombre = 30)
ggplot(partenaires_plan_carte) +
geom_sf(aes(fill = factor(Acteur_Organisation_de_mise_en_uvre))) +
scale_fill_continuous() +
labs(fill = "Partenaires avec interventions planifiees") +
theme(text = element_text(family = "Arial Narrow"))
ggplot(carte_gap) +
geom_sf(aes(fill = Ratio)) +
scale_fill_continuous() +
labs(fill = "Partenaires avec interventions planifiees") +
theme(text = element_text(family = "Arial Narrow"))
ggplot(carte_gap) +
geom_sf(aes(fill = factor(Ratio))) +
scale_fill_manual(values = couleurs) +
labs(fill = "% Gap in each province") +
theme(text = element_text(family = "Arial Narrow"))
data$calculation
source('~/Eliora Henzler/GitHub/Siral_dashboard/nettoyage.R')
ggplot(partenaires_plan_carte) +
geom_sf(aes(fill = factor(Acteur_Organisation_de_mise_en_uvre))) +
scale_fill_gradient(low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50") +
labs(fill = "Partenaires avec interventions planifiees") +
theme(text = element_text(family = "Arial Narrow"))
parternaires_planifie = data %>%
filter(Statut == "planifi")
nombre_parternaires_planifie = parternaires_planifie %>%
select(Acteur_Organisation_de_mise_en_uvre) %>% unique %>% nrow
cat("Nombre de partenaires avec interventions:",nombre_parternaires_planifie,"</b><br>")
parternaires_planifie_p = comptage_par_admin(df = parternaires_planifie,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
partenaires_plan_carte = carte_complete(donnees_groupees =
parternaires_planifie,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
partenaires_plan_carte = carte_complete(donnees_groupees =
parternaires_planifie,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
couleurs <- couleurs_pour_carte("Blues", nombre = length(unique(partenaires_plan_carte$Acteur_Organisation_de_mise_en_uvre)))
ggplot(partenaires_plan_carte) +
geom_sf(aes(fill = Acteur_Organisation_de_mise_en_uvre)) +
scale_fill_gradient(low = "#132B43", high = "#56B1F7", space = "Lab", na.value = "grey50") +
labs(fill = "Partenaires avec interventions planifiees") +
theme(text = element_text(family = "Arial Narrow"))
ggplot(partenaires_plan_carte) +
geom_sf(aes(fill = Acteur_Organisation_de_mise_en_uvre)) +
labs(fill = "Partenaires avec interventions planifiees") +
theme(text = element_text(family = "Arial Narrow"))
ggplot(partenaires_plan_carte) +
geom_sf(aes(fill = factor(Acteur_Organisation_de_mise_en_uvre))) +
labs(fill = "Partenaires avec interventions planifiees") +
theme(text = element_text(family = "Arial Narrow"))
parternaires_planifie = data %>%
filter(Statut == "planifi")
nombre_parternaires_planifie = parternaires_planifie %>%
select(Acteur_Organisation_de_mise_en_uvre) %>% unique %>% nrow
cat("Nombre de partenaires avec interventions:",nombre_parternaires_planifie,"</b><br>")
parternaires_planifie_p = comptage_par_admin(df = parternaires_planifie,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
partenaires_plan_carte = carte_complete(donnees_groupees =
parternaires_planifie,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
View(partenaires_plan_carte)
partenaires_plan_carte$Acteur_Organisation_de_mise_en_uvre
parternaires_planifie_p = comptage_par_admin(df = parternaires_planifie,
nom.admin = province,
nom.partenaires = "Acteur_Organisation_de_mise_en_uvre")
parternaires_planifie_p$Acteur_Organisation_de_mise_en_uvre
partenaires_plan_carte = carte_complete(donnees_groupees =
parternaires_planifie_p,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
partenaires_plan_carte = carte_complete(donnees_groupees =
parternaires_planifie_p,
shapefile = Province,
nom.admin.donnees = "province",
nom.admin.shapefile = "NOM",
variable = "Acteur_Organisation_de_mise_en_uvre")
couleurs <- couleurs_pour_carte("Blues", nombre = length(unique(partenaires_plan_carte$Acteur_Organisation_de_mise_en_uvre)))
ggplot(partenaires_plan_carte) +
geom_sf(aes(fill = factor(Acteur_Organisation_de_mise_en_uvre))) +
labs(fill = "Partenaires avec interventions planifiees") +
scale_fill_manual(values = couleurs) +
theme(text = element_text(family = "Arial Narrow"))
